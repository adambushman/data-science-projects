---
title: "Redefining NBA positions and classifying those for incoming prospects"
description: "Leveraging multiple machine learning methods in R to derive new NBA positions based on player roles/syles and using such to classify incoming NBA prospects."
author: "Adam Bushman"
date: "12/15/2024"
format: 
    html:
        toc: true
        theme: simplex
        smooth-scroll: true
        embed-resources: true
execute:
    warning: false
    error: false
---


## Prompts

### Prompt #1

>   Which machine learning methods did you implement?

I chose to implement the following machine learning methods in my final project:

1.  Principal Component Analysis (PCA)
2.  KMeans Clustering
3.  Hierarchical Clustering
4.  Elastic Net Logistic Regression
5.  Neural Network
6.  Boosted Trees


### Prompt #2

>   Discuss the key contribution of each method to your analysis. If a method didn't contribute, discuss why it didn't. A sentence or two for each method is plenty.

1.  Principal Component Analysis (PCA): 
    Used for the purpose of more performant clustering. Reduced dimensionality of source data from 195 features to 57 principal components while retaining 95% of overall variance.

2.  KMeans Clustering: 
    Used for the purpose of determing the proper number of clusters. Used the "within cluster sum of squares" measure to evaluate a range of cluster numbers, finding the optimal number via plotting for the elbow point. This was the method used for cluster assignments.

3.  Hierarchical Clustering: 
    Used for the purpose of validating the proper number of clusters. Used the "within cluster sum of squared error" measure to evaluate a range of cluster nujmbers, finding the optimal number via elbow point.

4.  Elastic Net Logistic Regression: 
    Used for the purpose of exploring top features that explain the unique characteristics of each cluster. Through these insights, I derived meaningful cluster labels. Tuned `lambda` and `alpha` (`mixture`) hyperparameters via cross-validation and minimized the performance metric *Root Mean Squared Error*.

5.  Neural Network: 
    Used for the purpose of predicting cluster labels for test data. Tuned `penalty`, `hidden_units`, and `epochs` hyperparameters for maximizing performance metric *AUC* on training data. Chosen as final model for prediction.

6.  Boosted Trees: 
    Used for the purpose of validating performance results of Neural Network model. Tuned `mtry`, `trees`, `tree_depth`, and `learn_rate` hyperparameters for maximizing performance metric *AUC* on training data. 


### Prompt #3

>   Did all methods support your conclusions or did some provide conflicting results? If so they provided conflicting results, how did you reconcile the differences?

*   Clustering:
    -   KMeans and Hierarchical clustering were both employed to validate results.
    -   Both gave similar results, but KMeans proved more consistent.
    -   Hierarchical clustering via `mclust` saw a far more jagged and harder to read elbow point; in some instances, there were large portions of the line with marginal reductions in "WSSE" for each additional cluster.
    -   KMeans had a nice and smooth, far easier to spot elbow point. With hierarchical clustering confirming KMeans was reasonable, chose to use this appraoch for assigning clusters.

*   Final Prediction Models:
    -   Neural Network and XGBoost were both very performant, producing *AUC* values exceeding `0.81`. 
    -   Neural Network fit across the cross-validated tuning grid **MUCH** faster than XGBoost, which was surprising.
    -   Did not observe any further conflicting results.


## Assignment Workflow

## Data Prep

### Load Libraries & Data Set

We'll use the following libraries and their dependencies

```{r}
library("tidyverse") # Used for general data manipulation and visualization
library("tidymodels") # Used for its modeling framework
library("tidyclust") # Used for clustering approaches
library("dataPreparation") # Used for scaling, where needed
library("kernlab") # Weighted kernal k-means
library("FactoMineR") # Used for PCA
library("VIM") # Used for training data imputation
```

```{r}
#| eval: false
setwd("full-projects/nba-player-position-roles/R")
```

Let's import the source data:

```{r}
nba_stats <- read.csv("nba-player-data.csv")
```

The source data is comprized of ~200 features relating to the top 500 NBA players in minutes played over the past 5 seasons. The measures encompass offensive and defensive activity, including shooting, passing, rebounding, etc. We can review the measures below:

```{r}
glimpse(nba_stats)
```

### Data Quality

Let's see if we have any missing or empty values we need to worry about:

```{r}
# Check for missing or empty values
na_summary <- sapply(nba_stats, function(col) {
    sum(is.na(col) | is.null(col) | col == "", na.rm = TRUE)
})

any(na_summary > 0)
```

No, all columns and rows feature complete observations.


### Scale Variables

We're going to implement scaling of the variables in order to properly apply the PCA algorithm. First, we'll separate the numberic and ID features from the data.

```{r}
nba_numeric <- nba_stats |> select(
    where(is.numeric) &
        -c(profile_height_in, profile_weight_lbs)
)

nba_ids <- nba_stats |> select(
    where(is.character) |
        c(profile_games_played, profile_minutes, profile_height_in, profile_weight_lbs)
)
```

In order to avoid sensitivity to volume (i.e. one player playing more than another), we need to create volume adjusted measures based on minutes (i.e. points per "36 minutes", an industry standard). We'll do this for all integer columns (so as to preserve the integrity of "rate" statistics, like "three-point percentage"). We'll then drop the games and minutes features:

```{r}
nba_adjusted <- nba_numeric |>
    mutate(across(
        where(is.integer) & -c(profile_games_played, profile_minutes),
        ~ . * 36.0 / profile_minutes
    )) |>
    select(-c(profile_games_played, profile_minutes))
```

And finally, we scale the numeric variables:

```{r}
nba_scaled <- scale(nba_adjusted)
```


### Principal Component Analysis

Using the scaled variables, let's perform PCA. We'll try to cluster with and without PCA. We'll have both data set versions at our disposal for clustering.

```{r}
nba_pca <- princomp(nba_scaled)
```

```{r}
summary(nba_pca)
```

We have 195 numeric source variables so 195 principal components. The first 15 components explain 75% of variance, the first 40 explain 90% of the variance and the first 57 principal components explain 95%. That means just over 1/4 of our original number of features explain nearly all of the total variance. 

PCA did a good job at 1) reducing dimensionality and 2) eliminating any colinearity of features. 

Let's save our results:

```{r}
nba_pca_data <- as.data.frame(nba_pca$scores)
```

Let's visualize the first two principal components:

```{r}
ggplot(
    nba_pca_data,
    aes(Comp.1, Comp.2)
) +
    geom_point()
```


## Clustering

Let's try to cluster these observations.

Historically, basketball has used 5 positions. In modern times, this has been reduced to approximately 3. Let's use 3 as our minimum and 12 as our maximum. Let's try a few different clustering techniques.

```{r}
clustering_grid <- data.frame(
    clusters = 3:20
)
```

Against each of these, we can run different clustering algorithms and produce measures for the "within sum of squares". This will help us determine the proper number of clusters derived from the data.


### Partition Clustering

Let's setup a function to run a kmeans cluster for every number of cluster in the above grid and generate the respective performance metric:

```{r}
cluster_kmeans <- function(k, data) {
    fit <- kmeans(data, k)
    vals <- glance(fit)
    return(vals$tot.withinss)
}
```   


### Hierarchical Clustering

Let's do the same thing but for an hclust algorithm:

```{r}
cluster_hclust <- function(k, data) {
    # Run the algorithm
    model <- hier_clust(num_clusters = k, linkage_method = "complete")
    fit <- model |> fit(~., data = as.data.frame(data))

    wss <- fit |>
        sse_within() |>
        select(wss) |>
        unlist() |>
        sum()
    return(wss)
}
```

Let's now generate our clusters!

### Cluster Results

Let's map over the number of clusters and execute the respective algorithm.

```{r}
clustering_grid_01 <-
    clustering_grid |>
    mutate(
        kmeans = map(clusters, ~ cluster_kmeans(.x, nba_scaled)),
        hclust = map(clusters, ~ cluster_hclust(.x, nba_scaled))
    )
```

We can now plot these and find the "elbow", or the point of diminishing returns from an increasing the number of clusters.

```{r}
clustering_grid_01 |>
    pivot_longer(cols = -clusters) |>
    unnest(value) |>
    ggplot(aes(factor(clusters), as.numeric(value))) +
    geom_line(aes(color = name), group = 1) +
    facet_wrap(~name, ncol = 1, scales = "free")
```

`hclust` gives the impression that around 10 is the right number of clusters, though the elbow is difficult to identify. `kmeans` suggests 9 or 10.

Let's see if we get different results using just the first 53 principal components. 

```{r}
clustering_grid_02 <-
    clustering_grid |>
    mutate(
        kmeans = map(clusters, ~ cluster_kmeans(.x, nba_pca_data[, 1:57])),
        hclust = map(clusters, ~ cluster_hclust(.x, nba_pca_data[, 1:57]))
    )
```

```{r}
clustering_grid_02 |>
    pivot_longer(cols = -clusters) |>
    unnest(value) |>
    ggplot(aes(factor(clusters), as.numeric(value))) +
    geom_line(aes(color = name), group = 1) +
    facet_wrap(~name, ncol = 1, scales = "free")
```

The same algorithms with the first 57 principal components indicate somewhere around 9 to 10. Let's proceed with the PCA results and assume clusters of `10`. I also think the smoothing of `kmeans` is a little nicer so let's default to that algorithm.

```{r}
set.seed(2015)
fit <- kmeans(nba_pca_data[, 1:57], 10)

nba_ids$cluster <- factor(fit$cluster)
nba_adjusted_full <- nba_adjusted |> mutate(cluster = factor(fit$cluster))
nba_scaled_full <- as.data.frame(nba_scaled) |> mutate(cluster = factor(fit$cluster))

nba_ids |>
    count(cluster) |>
    mutate(prop = n / sum(n))
```

The initial results seem fairly reasonable. Understandably, some clusters (or as we would interpret, "positions"/"roles"/"styles") have more players than others given the nature of the game.

Let's evaluate some specific players and get a sense for the results.

### Cluster Evaluation

The first example deals with 4 players typically thought of as "centers". Their physical profiles are somewhat similar but there are significant differences in style and role. We should probably see three different cluster assignments.

```{r}
nba_ids |> filter(
    profile_name %in% c(
        "Victor Wembanyama",
        "Nikola Jokic",
        "Clint Capela",
        "Rudy Gobert"
    )
)
```

We see Capela and Gobert with the same cluster assignment, making sense, but Jokic and Wembanyama are also assigned to the same. Given their offensive game, this could make sense, as most of their differentiators are on the defensive end.

Let's try another. These three all have similar physical profiles, roles, and play styles. Let's see how they are clustered.

```{r}
nba_ids |> filter(
    profile_name %in% c(
        "Jimmy Butler",
        "Jayson Tatum",
        "Jaylen Brown"
    )
)
```

We see they all fall into the same cluster! This gives some assurance that the clustering is capturing some of the inherent patterns.

What about all players who've historically been labeled "point guards". Each of these play so differently we should see completely different cluster assignments.

```{r}
nba_ids |> filter(
    profile_name %in% c(
        "Collin Sexton",
        "Bruce Brown",
        "Stephen Curry",
        "Jose Alvarado"
    )
)
```

All different except for Curry and Sexton. We'll have to dig into the cluster more closely to learn about this. So far its tracking pretty close to what a contextual lens might suggest.

Let's look at at some of the most dissimilar players from a physical profile that have the same cluster.

```{r}
getMinMax <- function(data, cluster = 1) {
    data_f <- data[data$cluster == cluster, ]
    data_f$val <- (scale(data_f$profile_height_in) + scale(data_f$profile_weight_lbs)) / 2
    data_f <- data_f |> arrange(desc(val))

    return(c(
        data_f$profile_name[nrow(data_f)],
        data_f$profile_name[1]
    ))
}
```

```{r}
for (c in sort(unique(nba_ids$cluster))) {
    players <- getMinMax(nba_ids, c)
    print(paste(
        c, "- Min:", players[1],
        "| Max:", players[2]
    ))
}
```

Generally speaking, these make a lot of sense. The next step would be to analyze each cluster and come up with unique labels for them that describe the new position/role/style.


### Cluster Naming

Clusters are labeled arbitrarily. There's nothing intuitive by labels `1`, `2`, etc. We need to give these clusters meaning by assigning `1` a descriptive label.

We'll do that two ways:

1.  We'll create a penalized logistic regression model for each individual cluster and select the highest absolute value of the coefficients. In this way, we can understand some of the predictors that define the cluster.

2.  We'll leverage AI to use what it knows about the players in each cluster to give label suggestions.

We'll pool these perspectives together to generate our own label. We'll save the label in the following table:

```{r}
cluster_labels <- tibble(
    cluster = factor(1:10),
    label = as.character(NA),
    abbrev = as.character(NA),
)
```


#### Guidelines

We want to shy away from traditional language: "guard", "forward", "center". Even labels like "backcourt", "frontcourt" can pigeonhole a group of players in unhelpful ways, potentially. Additionally, modern terms like "wing" and "big" we may want to shy away from.

This puts more emphasis on style of play and role than physical profile or position.


#### Top Features Model

Here's the function that will ingest our dataset, classifify against a binary target (`1` = cluster of interest, `0` = all other clusters).

We'll perform cross validation, take the best model, fit on the entire data set, and take the top coefficients.

```{r}
get_elasnet_top_features <- function(data) {
    # Configure recipe
    mod_rec <- recipe(target ~ ., data)

    # Setup cross-validation folds
    mod_cv <- rsample::vfold_cv(data, v = 5)

    # Configure tuning grid
    mod_tune_grid <- grid_regular(
        penalty(),
        mixture(),
        levels = 4
    )

    # Setup model definition
    mod_def <- logistic_reg(
        mixture = tune(),
        penalty = tune()
    ) |>
        set_engine("glmnet")

    # Configure workflow
    mod_wflw <-
        workflow() |>
        add_model(mod_def) |>
        add_recipe(mod_rec)

    # Run cross-validated tuning
    set.seed(814)
    mod_tune <-
        mod_wflw |>
        tune_grid(
            resamples = mod_cv,
            grid = mod_tune_grid,
            metrics = metric_set(roc_auc)
        )

    # Select & fit best model
    best_mod <- mod_tune |> select_best(metric = "roc_auc")
    final_wflw <- mod_wflw |> finalize_workflow(best_mod)
    final_fit <- fit(final_wflw, data = data)

    # Capture the top predictors by absolute value of coefficient
    tidy(final_fit) |>
        arrange(desc(abs(estimate))) |>
        slice_head(n = 10) |>
        select(-penalty) |>
        print()
}
```

We'll call this for each cluster.

We'll setup some parallelization for this:

```{r}
set.seed(729)
# Define parallelization
cores_target <- ceiling(parallel::detectCores() * 0.75)
doParallel::registerDoParallel(cores = cores_target)
```


#### Aritificial Intelligence

We're going to let AI suggest some labels. All it will see is 1) our prompt and 2) the player names pertaining to the cluster. This will lead to a less biased approach

This is the prompt we'll use (along with the list of names) against OpenAI's ChatGPT 4o model:

>   Below are a list of recent NBA player names. Assume these players belong in a collective group based on their play style and role. Generate 5 unique suggestions for a group label that is short and sweet but descriptive of the group. Restrict evaluation to style and role; avoid analysis rooted in reputation, playing time, etc.


#### Cluster #1

Player names:

```{r}
nba_ids[nba_ids$cluster == "1", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "1", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

These top features are interesting. There's clear evidence of a) athleticism and skill in the open court, b) some tendency toward mistakes, and 3) overall sub-impact.  

ChatGPT generated the following label suggestions:

*   Playmaking Hustlers
*   Versatile Initiators
*   Dynamic Facilitators
*   Crafty Drivers
*   Hybrid Creators

I'm somewhat drawn to words like "initiator" and "hustler". I don't see any evidence of "facilitator" or "creator". There's a good mix of physical profile and style. Let's go with "Versatile Anchor".

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "1", 2] <- "Versatile Anchor"
cluster_labels[cluster_labels$cluster == "1", 3] <- "VA"
```

---

#### Cluster #2

Player names:

```{r}
nba_ids[nba_ids$cluster == "2", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "2", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

What first catches me eye with these features are `second_change_at_rim_frequency` and `at_rim_accuracy`. These are players oriented near the basket. Next what catches my eye are some of the `second_change_3` variations but that are negative. As in lower frequency on second chance opportunities but not necessarily lower on overall 3s.

ChatGPT generated the following label suggestions:

*   Versatile Wings
*   Dynamic Bigs
*   Stretch Forwards
*   Two-Way Frontcourt
*   Hybrid Playmakers

In comparing these options to the player list set, I'm drawn to the "Hybrid Playmakers" label. It's not very descriptive. We have again, a good mix of physical profile and style. Therefore, let's settle on "Versatile Finisher".

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "2", 2] <- "Versatile Finisher"
cluster_labels[cluster_labels$cluster == "2", 3] <- "VF"
```

---

#### Cluster #3

Player names:

```{r}
nba_ids[nba_ids$cluster == "3", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "3", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

What catches my eye are lower on assist features than other groups but higher rebounders and some hustle stuff here. 

ChatGPT generated the following label suggestions:

*   Scoring Wings
*   Perimeter Playmakers
*   Versatile Shooters
*   Dynamic Swingmen
*   Offensive Engines

I see all of these words in this group to some extent. The combo that most seems interesting is probably "versatile" and "engine", so we'll go with "Versatile Engine".

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "3", 2] <- "Versatile Engine"
cluster_labels[cluster_labels$cluster == "3", 3] <- "VE"
```

---

#### Cluster #4

Player names:

```{r}
nba_ids[nba_ids$cluster == "4", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "4", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

This group is pretty clear. Scoring, creating, playmaking.

ChatGPT generated the following label suggestions:

*   Elite Creators
*   Dynamic Scorers
*   Playmaking Stars
*   Offensive Leaders
*   All-Around Playmakers

To borrow a word from a previous cluster, I like the word "engine". These are the players that engage the team's "drivetrain", so to speak. Let's go with "Perimeter Engine".

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "4", 2] <- "Perimeter Engine"
cluster_labels[cluster_labels$cluster == "4", 3] <- "PE"
```

---

#### Cluster #5

Player names:

```{r}
nba_ids[nba_ids$cluster == "5", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "5", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

What's interesting about this group's features compared to the list of players relates to how much is assisted and the propencity for 3P field goals. 

ChatGPT generated the following label suggestions:

*   Rim Protectors
*   Paint Enforcers
*   Dynamic Bigs
*   Post Specialists
*   Interior Anchors

"Dynamic Bigs" is the only example I like but we're trying to shy away from physical profiles and stick with style/role. Let's target "Interior Connector".

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "5", 2] <- "Interior Connector"
cluster_labels[cluster_labels$cluster == "5", 3] <- "IC"
```

---

#### Cluster #6

Player names:

```{r}
nba_ids[nba_ids$cluster == "6", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "6", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

These features are interesting. What sticks out? a) their scoring isn't really assisted and 2) there's some unique approach to defense where they draw a lot of fouls.

ChatGPT generated the following label suggestions:

*   Floor Generals
*   Playmaking Guards
*   Perimeter Orchestrators
*   Dynamic Ball Handlers
*   Backcourt Catalysts

Again, we're trying to shy away from traditional terminology. I like "orchestrator" as it eludes more responsibility than just "facilitator". However, it's often used mostly for traditional guard positions. Let's go with "Perimeter Anchor", instead.

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "6", 2] <- "Perimeter Anchor"
cluster_labels[cluster_labels$cluster == "6", 3] <- "PA"
```

---

#### Cluster #7

Player names:

```{r}
nba_ids[nba_ids$cluster == "7", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "7", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

What sticks out is not efficient scorers. But there is some creating, getting to the free-throw line stuff that's interesting.

ChatGPT generated the following label suggestions:

*   Two-Way Wings
*   Defensive Specialists
*   Versatile Role Players
*   Perimeter Stoppers
*   Glue Guys

There are certainly some good defenders in this list but that's not the primary thing here. "Two-Way" could be good. "Glue" and "connector" are intriguing words. I think the point is they do a bit of everything, but specialize in non-scoring events. Let's go with "Versatile Connector".

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "7", 2] <- "Versatile Connector"
cluster_labels[cluster_labels$cluster == "7", 3] <- "VC"
```

---

#### Cluster #8

Player names:

```{r}
nba_ids[nba_ids$cluster == "8", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "8", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

What sticks out is the orientation to perimeter activity, clearly.

ChatGPT generated the following label suggestions:

*   Catch-and-Shoot Crew
*   Perimeter Marksmen
*   Wing Snipers
*   Spot-Up Specialists
*   Floor Spacers

I think I like "Perimeter Finisher" best. It fits with some of the other language we've used too so it's cohesive.

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "8", 2] <- "Perimeter Finisher"
cluster_labels[cluster_labels$cluster == "8", 3] <- "PF"
```

---

#### Cluster #9

Player names:

```{r}
nba_ids[nba_ids$cluster == "9", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:
```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "9", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

In the opposite vein to above, this group sticks out for their presence on the interior.

ChatGPT generated the following label suggestions:

*   Rim Protectors
*   Paint Guardians
*   Defensive Anchors
*   Rebounding Specialists
*   Post Defenders

Let's go with "Interior Anchor". This helps describe the role on both ends of the floor. If we were just focused on "offense", we would classify as "Interior Finisher".

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "9", 2] <- "Interior Anchor"
cluster_labels[cluster_labels$cluster == "9", 3] <- "IA"
```

---

#### Cluster #10

Player names:

```{r}
nba_ids[nba_ids$cluster == "10", ]$profile_name
```

Let's pull the top features explaining this cluster assignment:

```{r}
target_cluster_df <- nba_scaled_full |>
    mutate(target = factor(ifelse(cluster == "10", 1, 0))) |>
    select(-cluster)

get_elasnet_top_features(target_cluster_df)
```

What sticks out in this group is 3P shooting with a bunch of rebounding and being in the center of the action. 

ChatGPT generated the following label suggestions:

*   Skilled Bigs
*   Versatile Frontcourt
*   Playmaking Centers
*   Dominant Big Men
*   All-Around Bigs

Let's go with "Interior Engine" for the moment. It describes this idea of engaging the team's "drivetrain" from inside-out.

```{r}
# Save cluster label
cluster_labels[cluster_labels$cluster == "10", 2] <- "Interior Engine"
cluster_labels[cluster_labels$cluster == "10", 3] <- "IE"
```

Now we can stop the parallelization:

```{r}
doParallel::stopImplicitCluster()
```

## New Position Labels

### Summary

Here's our final clusters, with labels and abbreviations. We settled on distinguishing orientation of play and style with "interior", "perimeter", and "versatile" descriptors. Obviously this isn'e exclusive, a "perimeter engine" would certainly score and operate on the interior as well, but it describes their tendencies: "out-in" vs "in-out". 

Next we settled on 4 roles or styles: "connector", "anchor", "finisher", and "engine". Again, these aren't exclusive but indicate where players tend and lean in their overall style and assumed roles.

```{r}
cluster_labels |>
    arrange(label)
```

Let's go through some exercises where we intersect these labels with the original data. Now that these labels have meaning, we can benchmark more easily against domain knowledge.

```{r}
nba_adjusted_full <- nba_adjusted_full |>
    inner_join(cluster_labels) |>
    bind_cols(nba_ids)
```


### Player Distributions

How many players across the NBA fall into these groups? We'd expect "Engines" to have the fewest, the "Versatile" group to be the largest sum overall. Let's see if that matches up with preconceptions.

```{r}
nba_adjusted_full |>
    group_by(label, abbrev) |>
    count() |>
    ungroup() |>
    mutate(perc = n / sum(n))
```

Our theories held pretty well. "Engines" are about the smallest of each of their respective groups. The "Versatile" group is the largest of them all. 

### League Distributions

We have labels for the "current" teams. Let's see how many of each of these belong to each team.

**NOTE: data gathered represents only the top 500 players by minutes over the last 4.5 seasons; therefore, some teams will see fewer than others and some players don't actively belong to a team**

```{r}
nba_adjusted_full |>
    group_by(profile_team_abbreviation, abbrev) |>
    count() |>
    ungroup() |>
    arrange(abbrev) |>
    pivot_wider(
        names_from = abbrev,
        values_from = n,
        values_fill = 0
    ) |>
    gt::gt()
```

It's pretty interesting to see different approaches. 

*   Interior
    -   ORL (Orlando Magic): no Engines or Anchors, but 3 Interior Connectors (Wendell Carter Jr., Goga Bitadze, Jonathan Isaac)
    -   SAS (San Antonio Spurs): no Anchors or Connectors and only 1 Engine (Victor Wembanyama)
*   Perimeter
    -   CLE: 8 players total, 3 of which are Perimeter Finishers (Georges Niang, Max Strus, Sam Merrill)
    -   DEN: only 2 players (Finisher: Justin Holiday, Engine: Jamal Murray) and no Perimeter Anchors
*   Versatile
    -   BOS (Boston Celtics): only 3 players and no Engines or Anchors
    -   SAS (San Antonio Spurs): a total of 13, 6 of which are Versatile Finishers

### Team Distributions

Let's take a team like Boston and see which of our new position labels are getting minutes. Let's workup a quick function for that:

```{r}
peek_team_dist <- function(team) {
    nba_adjusted_full |>
        filter(profile_team_abbreviation == team) |>
        mutate(mp_gm = profile_minutes / profile_games_played) |>
        arrange(desc(mp_gm)) |>
        select(profile_name, label, abbrev, mp_gm) |>
        gt::gt()
}
```

```{r}
peek_team_dist("BOS")
```

Really interesting. Boston is led by their Engines, then Anchors, and then some Connectors.

Let's try another team, say the Portland Trailblazers:

```{r}
peek_team_dist("POR")
```

Here we see some differences, with Connectors featured a little more towards the top wich a lot of Versatile type players as opposed to Perimeter or Interior focused.

### Next Steps

There are **many** avenues to take this analysis. We could analyze impact of each position on winning, understand career earnings through the lens of these new positions, and much more.

Where we are going to take the analysis is in the direction of understanding the style and role of incoming NBA prospects. One of the toughest parts of scouting the next wave of talent is judging how their game translates to the professional level. 

>   How do the first round talents in the upcoming 2025 NBA draft project across our new positions?

This next phase requires:

*   Pre-NBA measures for as many players from our cluster assigned data set as possible
    -   This will be our "training" set; we'll intersect pre-NBA stats with the derived positions so far
    -   *NOTE*: some players lack sufficient pre-NBA data due to coming directly from high school or playing internationally. These data sets are spotty and hard to access. For our purposes, we'll concentrate on players who played in the NCAA (collegiate basketball league in the United States) prior to being drafted in the NBA. This ensures we have consistent data for modeling the relationship of pre-NBA performance and eventual NBA positions. It helps that roughly 80% of our original player list will be featured in the training set.

*   Active collegiate player measures
    -   We'll also want a "testing" set that features currently active collegiate players who have yet to play in the NBA. We'll use the first round projections from [No Ceilings](https://www.noceilingsnba.com/p/2025-nba-draft-big-board-v2)
    -   For reasons explained previously, we won't collect measures for any international prospects ranked by No Ceilings (these are just 4 of the 30 first round prospects projected by No Ceilings)


## Projecting Incoming Prospects

### Data Prep

We'll first load our "training" data (collegiate data for active NBA players) and intersect with the new positions:

```{r}
mbb_data_raw <- read.csv("bballrefstats/college-players.csv")
```

```{r}
if (!exists("nba_adjusted_full")) {
    nba_adjusted_full <- read.csv("nba-player-clustered.csv")
}
```

```{r}
mbb_data_pos <- mbb_data_raw |>
    inner_join(
        nba_adjusted_full |> select(profile_name, cluster_label = label, cluster_abbrev = abbrev),
        by = join_by(player_name == profile_name)
    )
```

We've got some NAs in our data:

```{r}
# Check for missing or empty values
mbb_na <- sapply(mbb_data_pos, function(col) {
    sum(is.na(col) | is.null(col) | col == "", na.rm = TRUE)
})

names(which(mbb_na > 0))
```

We do have some missing values. Why is that? There's two primary reasons:

1.  Calculation limiation: three-point percentage requires 3P attempts. Where there are none, there is no possible value.
2.  Era limitations: not all measures throughout basketball history have been available due to tracking technology evlolving over time. 

How do we resolve?

Well for #1, we'll impute as zero. Since we account for volume via another measure (`3PA`), this shouldn't be an issue. 

```{r}
mbb_fillna_1 <- mbb_data_pos |>
    mutate(col_3pp = ifelse(is.na(col_3pp), 0, col_3pp))
```

For the situation in #2, all players will have a value at least zero or greater. While not "captured" at the point in time, had the technology been there the values would be represented. Therefore, by imputing the values, we stick with best practice of determing what the values would have been. Let's do some kNN imputation!

```{r}
mbb_imputed <- kNN(
    mbb_fillna_1,
    variable = setdiff(names(which(mbb_na > 0)), "col_3pp"),
    k = 5
) |>
    select(!contains("_imp"))
```

And let's confirm we have fully complete data:

```{r}
# Check for missing or empty values
mbb_na_2 <- sapply(mbb_imputed, function(col) {
    sum(is.na(col) | is.null(col) | col == "", na.rm = TRUE)
})

any(mbb_na_2 > 0)
```

And now, our training data is fully cleaned up! Let's bring in our testing data, or the "incoming prospects".

```{r}
mbb_prospects <- read.csv("../bballrefstats/incoming-prospects.csv")
```

```{r}
# Check for missing or empty values
any(sapply(mbb_prospects, function(col) {
    sum(is.na(col) | is.null(col) | col == "", na.rm = TRUE)
}) > 0)
```

Perfect! And now, let's just check to confirm we have similar columns:

```{r}
setdiff(names(mbb_prospects), names(mbb_imputed))
```

The only column in our testing data that isn't in training is `draft_projection`, which is a context only field. Let's prep the models!


### Modeling Prep

With our prepped data, we're ready to start defining the models and cross validation infastructure needed. We'll use two models: linear regression and a boosted trees approach (XGBoost). 

We can evaluate feature importance with both but in different ways. They also are different approaches, the former being in the ordinary least squares family while the latter is tree-based. In this way, we can validate results.

#### Model Definition

```{r}
mod_nn <- mlp(
    hidden_units = tune(),
    penalty = tune(),
    epochs = tune()
) |>
    set_engine("nnet") |>
    set_mode("classification")

mod_xg <- boost_tree(
    mtry = tune(),
    trees = tune(),
    tree_depth = tune(),
    learn_rate = tune()
) |>
    set_engine("xgboost") |>
    set_mode("classification")
```

#### Cross Validation

With cross validation, we'll be able to confirm that the performance results we're getting from the model aren't due to chance. We'll setup a 5 fold cross validation.

```{r}
mod_cv <- rsample::vfold_cv(mbb_imputed, v = 5)
```

We aren't splitting into training and testing since we're only concerned with making inference about the relationships. V fold cross validation will set up training and testing splits for us so those results will all us to test on untrained data anyway.

#### Recipe

Our recipe is fairly straight forward but we will put some extra preprocessing steps in there. In short, we want to predict `team_net_rating` using all of the positional labels.

```{r}
mod_recipe <- recipe(cluster_label ~ ., mbb_imputed) |>
    update_role(player_name, cluster_abbrev, new_role = "id") |>
    step_dummy(school_conf) |>
    step_normalize(is.numeric) |>
    step_pca(is.numeric)
```


#### Hyperparameters

```{r}
mod_nn_grid <- grid_regular(
    hidden_units(),
    penalty(),
    epochs(),
    levels = 4
)

mod_xg_grid <- grid_regular(
    trees(),
    tree_depth(),
    learn_rate(),
    mtry(c(1, ceiling(sqrt(30)))),
    levels = 4
)
```

### Fitting the Models

Parallelization:

```{r}
# Define parallelization
cores_target <- ceiling(parallel::detectCores() * 0.75)
doParallel::registerDoParallel(cores = cores_target)

set.seed(814)
```

#### Boosted Trees

```{r}
# Configure workflow
mod_wflw_xg <-
    workflow() |>
    add_model(mod_xg) |>
    add_recipe(mod_recipe)

# Run cross-validated tuning
set.seed(814)
mod_tune_xg <-
    mod_wflw_xg |>
    tune_grid(
        resamples = mod_cv,
        grid = mod_xg_grid,
        metrics = metric_set(roc_auc)
    )
```


#### Neural Network

Now let's tune the hyperparameters on the neural network using cross-validation. Just as before, we'll setup a workflow with the model and recipe, then tune against the neural network grid we setup previously.

```{r}
# Configure workflow
mod_wflw_nn <-
    workflow() |>
    add_model(mod_nn) |>
    add_recipe(mod_recipe)

# Run cross-validated tuning
mod_tune_nn <-
    mod_wflw_nn |>
    tune_grid(
        resamples = mod_cv,
        grid = mod_nn_grid,
        metrics = metric_set(roc_auc)
    )
```



### Comparing the Models

With both of those tuned, let's compare the top 5 configurations for each model:

```{r}
mod_tune_xg |>
    collect_metrics() |>
    slice_max(mean, n = 5)
```

The XGBoost model is producing "AUC" values of right around 0.81. We tuned 4 hyperparameters, and we see some common themes: `mtry` of 1 or 2, `tree_depth` of 5, and `learn_rate` of 0.1e^-6. That's a pretty performant model. Let's plot all values:

```{r}
mod_tune_nn |>
    collect_metrics() |>
    slice_max(mean, n = 5)
```

The Neural Network model is producing "AUC" values of around 0.85. We tuned 3 hyperparameters. The only real common theme is a `penalty` of 1. We're also seeing about half the `std_err` as we had with XGBoost. Additionally, the time to fit the model was quite a big lower with Neural Network.

By exploring both of these methods with extensive cross-validation and hyperparameter tuning, we've done extensive validation of our results.

Let's proceed with its best configuration for predicting on the new prospects. Let's make the final fit with these hyperparameters and all of the training data:

```{r}
# Select & fit best model
best_mod_nn <- mod_tune_nn |> select_best(metric = "roc_auc")
final_wflw_nn <- mod_wflw_nn |> finalize_workflow(best_mod_nn)
final_fit_nn <- fit(final_wflw_nn, data = mbb_imputed)
```


### Predict for Prospects

Let's now:

```{r}
mbb_predictions <- predict(
    final_fit_nn,
    mbb_prospects |> select(-draft_projection) |> mutate(cluster_abbrev = "X")
)
```

And here we have our predictions w/ prospects:

```{r}
classified_prospects <-
    mbb_prospects |>
    mutate(cluster_label = mbb_predictions$.pred_class) |>
    select(draft_projection, player_name, cluster_label)

classified_prospects
```

Let's take a peak at the distribution:

```{r}
classified_prospects |>
    count(cluster_label) |>
    arrange(desc(n))
```

This first round features a lot of Perimeter Finishers and Versatile Connectors (8 prospects each). This would be extremely helpful information as teams look to prioritize prospects during the scouting season and into the draft process of scheduling workouts, interviews, and ultimately selecting a prospect.